// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== AUTHENTICATION & AUTHORIZATION MODELS ====================

// User model for authentication and user management
model User {
  id                String         @id @default(cuid())
  email             String?        @unique
  phone             String?        @unique
  username          String?        @unique
  password          String?        // Hashed password
  firstName         String?
  lastName          String?
  isActive          Boolean        @default(true)
  isEmailVerified   Boolean        @default(false)
  isPhoneVerified   Boolean        @default(false)
  lastLoginAt       DateTime?
  profileImageUrl   String?
  preferredLanguage String?        @default("en")
  
  // Authentication related fields
  refreshTokens     RefreshToken[]
  sessions          Session[]
  otps              OTP[]
  
  // Authorization related fields
  userRoles         UserRole[]
  
  // Platform specific fields
  platform          PlatformType?  // Last used platform
  deviceInfo        Json?          // Device information
  
  // Audit fields
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  deletedAt         DateTime?      // Soft delete
  
  // Relations to other models
  events            Event[]        @relation("UserEvents")
  auditLogs         AuditLog[]     @relation("UserAuditLogs")
  
  // Customer support relations
  supportTickets    SupportTicket[] @relation("UserTickets")
  supportResponses  TicketResponse[] @relation("UserResponses")
  supportAgentFor   SupportTicket[] @relation("AssignedAgent")
  
  @@index([email])
  @@index([phone])
  @@index([username])
  @@index([isActive])
}

// Session model for managing user sessions
model Session {
  id            String       @id @default(cuid())
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  token         String       @unique
  expiresAt     DateTime
  ipAddress     String?
  userAgent     String?
  deviceId      String?
  platform      PlatformType
  isValid       Boolean      @default(true)
  lastActiveAt  DateTime     @default(now())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@index([isValid])
}

// Refresh token model for JWT refresh tokens
model RefreshToken {
  id        String       @id @default(cuid())
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  token     String       @unique
  expiresAt DateTime
  isRevoked Boolean      @default(false)
  platform  PlatformType
  deviceId  String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@index([isRevoked])
}

// OTP model for one-time passwords (SMS/Email verification)
model OTP {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  code        String
  type        OTPType
  expiresAt   DateTime
  isUsed      Boolean     @default(false)
  attempts    Int         @default(0)
  maxAttempts Int         @default(3)
  createdAt   DateTime    @default(now())
  
  @@index([userId])
  @@index([code])
  @@index([expiresAt])
  @@index([isUsed])
}

// Dynamic role model
model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  isSystem    Boolean    @default(false)  // System roles cannot be modified
  userRoles   UserRole[]
  rolePerms   RolePermission[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@index([name])
}

// User-Role relationship (many-to-many)
model UserRole {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

// Permission model for granular access control
model Permission {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  resource    String           // The resource this permission applies to (e.g., "users", "products")
  action      String           // The action allowed (e.g., "create", "read", "update", "delete")
  conditions  Json?            // Optional conditions for when this permission applies
  rolePerms   RolePermission[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  @@unique([resource, action])
  @@index([resource])
  @@index([action])
}

// Role-Permission relationship (many-to-many)
model RolePermission {
  id           String     @id @default(cuid())
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String
  createdAt    DateTime   @default(now())
  
  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

// Audit log for authentication and authorization events
model AuditLog {
  id          String    @id @default(cuid())
  user        User?     @relation("UserAuditLogs", fields: [userId], references: [id])
  userId      String?
  action      String    // The action performed (e.g., "login", "logout", "permission_change")
  resource    String?   // The resource affected
  resourceId  String?   // The ID of the resource affected
  oldValue    Json?     // Previous state (if applicable)
  newValue    Json?     // New state (if applicable)
  ipAddress   String?
  userAgent   String?
  platform    PlatformType?
  metadata    Json?     // Additional metadata
  createdAt   DateTime  @default(now())
  
  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
}

// ==================== ENUMS FOR AUTH SYSTEM ====================

enum OTPType {
  EMAIL_VERIFICATION
  PHONE_VERIFICATION
  PASSWORD_RESET
  TWO_FACTOR_AUTH
}

// ==================== EXISTING CONFIGURATION MODELS ====================

// Configuration Key represents a configurable setting in the system
model ConfigKey {
  id             String          @id @default(cuid())
  key            String          @unique
  description    String?
  category       ConfigCategory  @relation(fields: [categoryId], references: [id])
  categoryId     String
  isSecret       Boolean         @default(false)
  defaultValue   String? // Default value as JSON string
  valueType      ValueType       @default(STRING)
  values         ConfigValue[]
  serviceConfigs ServiceConfig[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([categoryId])
}

// Categories for organizing configuration keys
model ConfigCategory {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  configKeys  ConfigKey[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// Configuration values with environment and platform support
model ConfigValue {
  id          String        @id @default(cuid())
  configKey   ConfigKey     @relation(fields: [configKeyId], references: [id])
  configKeyId String
  value       String // Stored as JSON string for complex values
  environment String? // null means applies to all environments
  platform    PlatformType? // null means applies to all platforms
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   String?
  auditLogs   ConfigAudit[]

  @@unique([configKeyId, environment, platform])
  @@index([configKeyId])
  @@index([environment])
  @@index([platform])
}

// Service definitions for dynamic service management
model Service {
  id             String          @id @default(cuid())
  name           String          @unique
  description    String?
  serviceType    ServiceType     @default(CUSTOM)
  isEnabled      Boolean         @default(true)
  healthEndpoint String?
  serviceConfigs ServiceConfig[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

// Junction table for services and their required configs
model ServiceConfig {
  id          String    @id @default(cuid())
  service     Service   @relation(fields: [serviceId], references: [id])
  serviceId   String
  configKey   ConfigKey @relation(fields: [configKeyId], references: [id])
  configKeyId String
  isRequired  Boolean   @default(false)

  @@unique([serviceId, configKeyId])
  @@index([serviceId])
  @@index([configKeyId])
}

// Network configuration for CORS, rate limiting, etc.
model NetworkConfig {
  id          String        @id @default(cuid())
  name        String
  config      String // JSON configuration
  isEnabled   Boolean       @default(true)
  environment String? // null means applies to all environments
  platform    PlatformType? // null means applies to all platforms
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([name, environment, platform])
  @@index([name])
  @@index([environment])
  @@index([platform])
}

// Rate limiting configuration
model RateLimitRule {
  id          String        @id @default(cuid())
  path        String // API path pattern
  method      String? // HTTP method, null means all methods
  limit       Int // Number of requests
  windowSec   Int // Time window in seconds
  isEnabled   Boolean       @default(true)
  environment String? // null means applies to all environments
  platform    PlatformType? // null means applies to all platforms
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([path, method, environment, platform])
  @@index([path, method])
  @@index([environment])
  @@index([platform])
}

// Audit trail for configuration changes
model ConfigAudit {
  id            String        @id @default(cuid())
  configValue   ConfigValue   @relation(fields: [configValueId], references: [id])
  configValueId String
  oldValue      String?
  newValue      String?
  changedBy     String
  environment   String?
  platform      PlatformType?
  metadata      Json? // Additional metadata about the change
  createdAt     DateTime      @default(now())

  @@index([configValueId])
  @@index([environment])
  @@index([platform])
  @@index([createdAt])
}

// Feature flags for toggling features
model FeatureFlag {
  id          String        @id @default(cuid())
  name        String
  description String?
  isEnabled   Boolean       @default(false)
  environment String? // null means applies to all environments
  platform    PlatformType? // null means applies to all platforms
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([name, environment, platform])
  @@index([environment])
  @@index([platform])
}

// Analytics Models
model Event {
  id         String         @id @default(cuid())
  type       String
  source     String
  timestamp  DateTime       @default(now())
  userId     String?
  user       User?          @relation("UserEvents", fields: [userId], references: [id])
  sessionId  String?
  properties Json?
  metadata   EventMetadata?
  createdAt  DateTime       @default(now())
  
  @@index([userId])
  @@index([sessionId])
}

model EventMetadata {
  id         String   @id @default(cuid())
  eventId    String   @unique
  event      Event    @relation(fields: [eventId], references: [id])
  ip         String?
  userAgent  String?
  referer    String?
  path       String?
  method     String?
  statusCode Int?
  duration   Int? // in milliseconds
  createdAt  DateTime @default(now())
}

model PerformanceMetric {
  id        String   @id @default(cuid())
  name      String
  value     Float
  unit      String
  timestamp DateTime @default(now())
  tags      Json? // For storing key-value pairs for filtering
  serviceId String?
  createdAt DateTime @default(now())
}

model ErrorLog {
  id        String   @id @default(cuid())
  level     String   @default("error")
  message   String
  stack     String?
  context   Json?
  timestamp DateTime @default(now())
  serviceId String?
  userId    String?
  createdAt DateTime @default(now())
}

model Dashboard {
  id          String            @id @default(cuid())
  name        String            @unique
  description String?
  layout      Json
  isPublic    Boolean           @default(false)
  widgets     DashboardWidget[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model DashboardWidget {
  id          String    @id @default(cuid())
  name        String
  type        String // chart, metric, table, etc.
  config      Json
  dashboard   Dashboard @relation(fields: [dashboardId], references: [id])
  dashboardId String
  position    Json // {x, y, w, h}
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// ==================== PRODUCT CATEGORY MODELS ====================

// Category model for product organization
model Category {
  id            String      @id @default(cuid())
  name          String
  slug          String      @unique
  description   String?
  parentId      String?
  parent        Category?   @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children      Category[]  @relation("CategoryHierarchy")
  image         String?
  isActive      Boolean     @default(true)
  sortOrder     Int         @default(0)
  metaTitle     String?
  metaDescription String?
  attributes    CategoryAttribute[]
  products      ProductCategory[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@index([parentId])
  @@index([isActive])
  @@index([sortOrder])
}

// Category attributes for dynamic fields
model CategoryAttribute {
  id          String    @id @default(cuid())
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  name        String
  type        AttributeType
  isRequired  Boolean   @default(false)
  options     String[]  // For dropdown/multiselect types
  defaultValue String?
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@unique([categoryId, name])
  @@index([categoryId])
}

// Junction table for products and categories
model ProductCategory {
  id          String    @id @default(cuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  isPrimary   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  
  @@unique([productId, categoryId])
  @@index([productId])
  @@index([categoryId])
}

// Category view analytics
model CategoryView {
  id          String    @id @default(cuid())
  categoryId  String
  userId      String?
  sessionId   String?
  deviceInfo  Json?
  referer     String?
  timestamp   DateTime  @default(now())
  
  @@index([categoryId])
  @@index([userId])
  @@index([timestamp])
}

// ==================== PRODUCT MODELS ====================

// Core product model
model Product {
  id                String            @id @default(cuid())
  name              String
  slug              String            @unique
  description       String?
  shortDescription  String?
  sku               String?           @unique
  barcode           String?           @unique
  price             Decimal           @default(0)
  compareAtPrice    Decimal?          // Original price for showing discounts
  costPrice         Decimal?          // Internal cost price
  dealerPrice       Decimal?          // Special pricing for dealers
  isActive          Boolean           @default(true)
  isFeatured        Boolean           @default(false)
  isDigital         Boolean           @default(false)
  hasVariants       Boolean           @default(false)
  weight            Decimal?
  dimensions        Json?             // {length, width, height}
  metaTitle         String?
  metaDescription   String?
  metaKeywords      String[]
  searchKeywords    String[]
  
  // SEO and display
  seoScore          Int?
  pageTitle         String?
  canonicalUrl      String?
  
  // Relations
  categories        ProductCategory[]
  variants          ProductVariant[]
  attributes        ProductAttribute[]
  media             ProductMedia[]
  reviews           ProductReview[]
  inventory         ProductInventory?
  relatedProducts   ProductRelation[] @relation("SourceProduct")
  relatedToProducts ProductRelation[] @relation("TargetProduct")
  viewHistory       ProductView[]
  freeItems         FreeItemProduct[]
  
  // Analytics
  viewCount         Int               @default(0)
  purchaseCount     Int               @default(0)
  
  // Timestamps
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  publishedAt       DateTime?
  
  @@index([isActive])
  @@index([isFeatured])
  @@index([price])
  @@index([viewCount])
  @@index([purchaseCount])
  @@index([createdAt])
  @@index([publishedAt])
}

// Product variants (e.g., different sizes, colors)
model ProductVariant {
  id                String            @id @default(cuid())
  product           Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId         String
  name              String
  sku               String?           @unique
  barcode           String?           @unique
  price             Decimal?          // Override base product price
  compareAtPrice    Decimal?          // Original price for showing discounts
  dealerPrice       Decimal?          // Special pricing for dealers
  isActive          Boolean           @default(true)
  position          Int               @default(0)
  options           Json              // {color: "Red", size: "XL", etc.}
  
  // Relations
  media             ProductMedia[]
  inventory         ProductInventory?
  
  // Timestamps
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([productId])
  @@index([isActive])
  @@index([price])
}

// Product attributes (dynamic fields)
model ProductAttribute {
  id                String            @id @default(cuid())
  product           Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId         String
  name              String
  value             String            // Stored as string, can be parsed based on type
  type              AttributeType
  isFilterable      Boolean           @default(false)
  isSearchable      Boolean           @default(false)
  isVariantOption   Boolean           @default(false)
  position          Int               @default(0)
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@unique([productId, name])
  @@index([productId])
  @@index([isFilterable])
  @@index([isSearchable])
}

// Product media (images, videos, etc.)
model ProductMedia {
  id                String            @id @default(cuid())
  product           Product?          @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId         String?
  variant           ProductVariant?   @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId         String?
  type              MediaType         @default(IMAGE)
  url               String
  altText           String?
  title             String?
  position          Int               @default(0)
  width             Int?
  height            Int?
  size              Int?              // File size in bytes
  mimeType          String?
  
  createdAt         DateTime          @default(now())
  
  @@index([productId])
  @@index([variantId])
  @@index([type])
  @@index([position])
}

// Product inventory tracking
model ProductInventory {
  id                String            @id @default(cuid())
  product           Product?          @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId         String?           @unique
  variant           ProductVariant?   @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId         String?           @unique
  quantity          Int               @default(0)
  lowStockThreshold Int?
  backorderAllowed  Boolean           @default(false)
  reservedQuantity  Int               @default(0)
  warehouseLocation String?
  
  updatedAt         DateTime          @updatedAt
  
  @@index([quantity])
  @@index([lowStockThreshold])
}

// Product reviews and ratings
model ProductReview {
  id                String            @id @default(cuid())
  product           Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId         String
  userId            String?           // Optional, for authenticated users
  title             String?
  content           String
  rating            Int               // 1-5 star rating
  isVerifiedPurchase Boolean          @default(false)
  isApproved        Boolean           @default(false)
  helpfulCount      Int               @default(0)
  reportCount       Int               @default(0)
  response          String?           // Merchant response to review
  responseAt        DateTime?
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([productId])
  @@index([userId])
  @@index([rating])
  @@index([isApproved])
  @@index([createdAt])
}

// Related products
model ProductRelation {
  id                String            @id @default(cuid())
  sourceProduct     Product           @relation("SourceProduct", fields: [sourceProductId], references: [id], onDelete: Cascade)
  sourceProductId   String
  targetProduct     Product           @relation("TargetProduct", fields: [targetProductId], references: [id], onDelete: Cascade)
  targetProductId   String
  relationType      RelationType      @default(RELATED)
  position          Int               @default(0)
  
  createdAt         DateTime          @default(now())
  
  @@unique([sourceProductId, targetProductId])
  @@index([sourceProductId])
  @@index([targetProductId])
  @@index([relationType])
}

// Product view analytics
model ProductView {
  id                String            @id @default(cuid())
  product           Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId         String
  userId            String?
  sessionId         String?
  analyticsId       String?
  deviceInfo        Json?
  referer           String?
  timestamp         DateTime          @default(now())
  
  @@index([productId])
  @@index([userId])
  @@index([sessionId])
  @@index([analyticsId])
  @@index([timestamp])
}

// Product search analytics
model ProductSearch {
  id                String            @id @default(cuid())
  query             String
  userId            String?
  sessionId         String?
  analyticsId       String?
  resultCount       Int
  filters           Json?             // Applied filters
  sortBy            String?
  clickedProductId  String?
  timestamp         DateTime          @default(now())
  
  @@index([query])
  @@index([userId])
  @@index([sessionId])
  @@index([analyticsId])
  @@index([timestamp])
}

// ==================== CUSTOMER SUPPORT MODELS ====================

// Support ticket model for customer inquiries and issues
model SupportTicket {
  id            String           @id @default(cuid())
  reference     String           @unique // Ticket reference number (e.g., TKT-12345)
  subject       String
  description   String
  user          User             @relation("UserTickets", fields: [userId], references: [id])
  userId        String
  assignedTo    User?            @relation("AssignedAgent", fields: [assignedToId], references: [id])
  assignedToId  String?
  status        TicketStatus     @default(OPEN)
  priority      TicketPriority   @default(MEDIUM)
  category      TicketCategory   @relation(fields: [categoryId], references: [id])
  categoryId    String
  responses     TicketResponse[]
  attachments   TicketAttachment[]
  tags          String[]
  metadata      Json?            // Additional metadata (e.g., browser info, OS)
  closedAt      DateTime?
  reopenedAt    DateTime?
  dueAt         DateTime?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  @@index([userId])
  @@index([assignedToId])
  @@index([status])
  @@index([priority])
  @@index([categoryId])
  @@index([createdAt])
}

// Support ticket categories
model TicketCategory {
  id          String          @id @default(cuid())
  name        String          @unique
  description String?
  tickets     SupportTicket[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

// Responses to support tickets
model TicketResponse {
  id          String        @id @default(cuid())
  ticket      SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId    String
  user        User          @relation("UserResponses", fields: [userId], references: [id])
  userId      String
  content     String
  isInternal  Boolean       @default(false) // Whether this response is visible to the customer
  attachments TicketAttachment[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  @@index([ticketId])
  @@index([userId])
  @@index([isInternal])
}

// Attachments for tickets and responses
model TicketAttachment {
  id              String          @id @default(cuid())
  filename        String
  originalName    String
  mimeType        String
  size            Int             // File size in bytes
  path            String          // Storage path
  ticket          SupportTicket?  @relation(fields: [ticketId], references: [id])
  ticketId        String?
  response        TicketResponse? @relation(fields: [responseId], references: [id])
  responseId      String?
  createdAt       DateTime        @default(now())
  
  @@index([ticketId])
  @@index([responseId])
}

// Knowledge base articles for self-service support
model KnowledgeArticle {
  id            String      @id @default(cuid())
  title         String
  slug          String      @unique
  content       String
  excerpt       String?
  category      KnowledgeCategory @relation(fields: [categoryId], references: [id])
  categoryId    String
  tags          String[]
  isPublished   Boolean     @default(false)
  viewCount     Int         @default(0)
  helpfulCount  Int         @default(0)
  unhelpfulCount Int        @default(0)
  relatedArticles KnowledgeArticle[] @relation("RelatedArticles")
  relatedToArticles KnowledgeArticle[] @relation("RelatedArticles")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  publishedAt   DateTime?
  
  @@index([categoryId])
  @@index([isPublished])
  @@index([viewCount])
}

// Knowledge base categories
model KnowledgeCategory {
  id          String            @id @default(cuid())
  name        String            @unique
  description String?
  articles    KnowledgeArticle[]
  parentId    String?
  parent      KnowledgeCategory? @relation("KnowledgeCategoryHierarchy", fields: [parentId], references: [id])
  children    KnowledgeCategory[] @relation("KnowledgeCategoryHierarchy")
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  @@index([parentId])
}

// Customer satisfaction survey
model SatisfactionSurvey {
  id          String    @id @default(cuid())
  ticketId    String    @unique
  rating      Int       // 1-5 star rating
  feedback    String?   // Customer feedback
  createdAt   DateTime  @default(now())
  
  @@index([rating])
}

// Chat sessions for live support
model ChatSession {
  id          String    @id @default(cuid())
  userId      String?   // Optional, for authenticated users
  agentId     String?   // Support agent handling the chat
  sessionKey  String    @unique // Unique identifier for the chat session
  status      ChatStatus @default(ACTIVE)
  messages    ChatMessage[]
  metadata    Json?     // Additional metadata (e.g., browser info, page URL)
  startedAt   DateTime  @default(now())
  endedAt     DateTime?
  
  @@index([userId])
  @@index([agentId])
  @@index([status])
}

// Messages within a chat session
model ChatMessage {
  id            String      @id @default(cuid())
  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
  chatSessionId String
  senderId      String?     // User ID or agent ID
  senderType    SenderType  // USER or AGENT or SYSTEM
  content       String
  isRead        Boolean     @default(false)
  createdAt     DateTime    @default(now())
  
  @@index([chatSessionId])
  @@index([senderId])
  @@index([isRead])
}

// Support team availability schedule
model AgentSchedule {
  id        String    @id @default(cuid())
  agentId   String
  dayOfWeek Int       // 0-6 (Sunday-Saturday)
  startTime String    // HH:MM format
  endTime   String    // HH:MM format
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@unique([agentId, dayOfWeek])
  @@index([agentId])
  @@index([dayOfWeek])
  @@index([isActive])
}

// ==================== FREE ITEMS MODELS ====================

// FreeItems model for promotional items that can be attached to products
model FreeItem {
  id          String            @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  isActive    Boolean           @default(true)
  sortOrder   Int               @default(0)
  
  // Relations
  products    FreeItemProduct[]
  
  // Audit fields
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  @@index([isActive])
  @@index([sortOrder])
}

// Junction table for products and free items
model FreeItemProduct {
  id          String    @id @default(cuid())
  freeItem    FreeItem  @relation(fields: [freeItemId], references: [id], onDelete: Cascade)
  freeItemId  String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
  createdAt   DateTime  @default(now())
  
  @@unique([freeItemId, productId])
  @@index([freeItemId])
  @@index([productId])
}

// ==================== ENUMS ====================

enum AttributeType {
  TEXT
  NUMBER
  BOOLEAN
  DATE
  DROPDOWN
  MULTISELECT
  COLOR
  IMAGE
}

enum ValueType {
  STRING
  NUMBER
  BOOLEAN
  JSON
  ARRAY
}

enum ServiceType {
  DATABASE
  ANALYTICS
  CACHE
  EMAIL
  SMS
  CUSTOM
}

enum PlatformType {
  WEB
  MOBILE_ANDROID
  MOBILE_IOS
  DESKTOP_WINDOWS
  DESKTOP_MAC
  DESKTOP_LINUX
  ALL
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_ON_CUSTOMER
  WAITING_ON_THIRD_PARTY
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ChatStatus {
  ACTIVE
  WAITING
  TRANSFERRED
  CLOSED
}

enum SenderType {
  USER
  AGENT
  SYSTEM
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
  MODEL_3D
}

enum RelationType {
  RELATED
  UPSELL
  CROSS_SELL
  ACCESSORY
  ALTERNATIVE
}

